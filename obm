#!/usr/bin/php
<?php
/**
|--------------------------------------------------------------------------
| OBM ( Ob Package Manager )
|--------------------------------------------------------------------------
| Package Manager Functions
|
| Get Installer
| - Install the Obm          :  cd /var/www/ && wget http://obullo.com/obm
|
*/ 

/**
|--------------------------------------------------------------------------
| Command line examples
|--------------------------------------------------------------------------

| $ cd /var/www/
| $ wget http://obullo.com/obm
| 
| CREATE NEW PROJECT
| $ php obm install $yourprojectname
| 
| UPDATE EXISTING PROJECT
| $ php obm update
|
*/
$_SERVER['HTTP_USER_AGENT']     = 'OBM ( Obullo Package Manager ) / OS : '.php_uname();
$_SERVER['HTTP_ACCEPT_CHARSET'] = 'utf-8';

ini_set('zend.ze1_compatibility_mode', 0);
ini_set('memory_limit', '100000M');
set_time_limit(0);

if(getOSName() == 'Windows'){
    error("Obullo is African origin and he loves to dance.");
    die;
}
$OBM_VERSION = '0.1';
if(isset($_SERVER['argv'][0])){
    array_shift($_SERVER['argv']);
    if(ini_get('allow_url_fopen') !== "1"){
        error("You need to set allow_url_fopen to \"On\" in your php.ini file.");
        die;
    }
    if(isset($_SERVER['argv'][1]) AND strtolower($_SERVER['argv'][1]) == 'install'){
        if(is_dir($_SERVER['argv'][2])){
            error("You have already a project named as ".$_SERVER['argv'][2].", please try different name.");
            die;
        }
    }
    elseif(isset($_SERVER['argv'][1]) AND strtolower($_SERVER['argv'][1]) == 'update'){
        // parse package json and send files to OBM SERVER
        
    }
    $server_url   = 'http://obullo-2.0/obm_server.php';
    if(file_exists('package.json')){
        $user_package_json = file_get_contents('package.json');
        $_SERVER['argv']['_json'] = $user_package_json; // " { *40-23* : ";
    } else {
        error('Package.json file does not exists in your project root.');
        die;
    }
    
    $_SERVER['argv']['_version'] = $OBM_VERSION;
    // use key 'http' even if you send the request to https://...
    $options = array(
        'http' => array(
            'header'  => "Content-type: application/x-www-form-urlencoded\r\n",
            'method'  => 'POST',
            'content' => http_build_query($_SERVER['argv']),
        ),
    );
    $context  = stream_context_create($options);
    $json_res = file_get_contents($server_url, false, $context);
    //print_r(json_decode($json_res, true));
    $response = json_decode($json_res, true);
    
    if(isset($response['version_update'])){ // If need to OBM version update. Run the update.sh.
        echo "\33[0;36mNew OBM version available !\n";
        echo "upgrading to version ".$response['version_update']." ..\n";
        sleep(1);
        echo "please wait ..\n";
        sleep(1);
        echo "..\n";
        sleep(1);
        echo "...\n";

        $wget_sh = "
        sudo rm -rf obm
        sudo rm -rf /usr/bin/obm
        sudo wget https://raw.github.com/obullo/obm/master/obm;
        sudo chmod 777 obm
        sudo cp obm /usr/bin/obm
        echo \"\033[0m\";
        exit; > /dev/null &";
        shell_exec($wget_sh);
        
        echo "\033[0m";
        exit; //terminate the current script.
    }
    
    if(isset($response['errors'])){
        foreach($response['errors'] as $error){
            error($error);
        }
        die;
    }
    
    // print_r($response);
    // PARSE JSON DATA
    if(count($response) > 0){
        // give chmod 777 permission to installed folder
        // cd ..
        // chmod -R 777 modulename
    } else {
        error("Could not connect to the OBM Server, please try again.");
        die;
    }
    
    try {
        // Include the user packages.php to version compare foreach packages.
        require ('constants');
        require (APP .'config'. DS .'packages'. EXT);   // Loaded local packages
        
        // print_r($packages['dependencies']);
       
        $json = json_decode($user_package_json, true);
        if( ! isset($json['dependencies'])){
            error('No package found in your package.json file.');
            die;
        }
        /*
        foreach($json->dependencies as $depname => $depversion){
            echo $depname;
        }*/
        
        // print_r($response);
        foreach($response as $key => $remote_package_json){
            $pack = json_decode(trim($remote_package_json));
            if($pack == null){
                error("The package $key could not parsed, probably there is a syntax error in the package.json.");
            } 
            if($pack != null){
                // wget -O framework.zip https://github.com/obullo/framework/zipball/dev
                // unzip framework.zip
                // mv obullo-framework* obullo_modules/framework
                if( ! isset($pack->name)){
                    line('obm WARN package.json '.trim($pack->name).'@'.trim($pack->version).' No name field.');
                }
                if( ! isset($pack->version)){
                    line('obm WARN package.json '.trim($pack->name).'@'.trim($pack->version).' No version field.');
                }                
                if( ! isset($pack->repo->archive_url)){
                    line('obm WARN package.json '.trim($pack->name).'@'.trim($pack->version).' No repo -> archive_url field.');
                } else {
                        $shell 	= "curl -s --head ".trim($pack->repo->archive_url)." | head -n 1 | grep \"HTTP/1.[01] [23]..\"";
                        $output = shell_exec($shell);
                        if($output == null){
                           line('obm WARN package.json '.trim($pack->name).'@'.trim($pack->version).' '.trim($pack->repo->archive_url).' - url could not be resolved.');
                        } else {
                            $code = explode(" ", $output);
                            if(isset($code[1])) {
                                if($code[1] == '302' || $code[1] == '200'){  // Resolve package url
                                    // get local version of package ..
                                    $local_version = trim($json['dependencies'][$pack->name]);
                                    if($local_version == '*' || empty($local_version)){   // go to the packages file and learn current version.
                                        if($packages['dependencies'][$pack->name]['version'] < $pack->version){
                                            getHttpPackage($pack->name, $pack->repo->archive_url);
                                        }
                                        elseif($packages['dependencies'][$pack->name]['version'] == $pack->version){
                                            line('obm http 200 '.trim($pack->name).'@'.trim($pack->version).' OK already latest version.'); // trim($pack->repo->archive_url));
                                        }

                                    } else {
                                        // check current version exists ? if not install it !!
                                        if(is_dir(OB_MODULES .$pack->name)){
                                           if($packages['dependencies'][$pack->name]['version'] == $pack->version){
                                                line('obm http 200 '.trim($pack->name).'@'.trim($pack->version).' OK already latest version.'); // trim($pack->repo->archive_url));
                                           }
                                        } else {
                                           getHttpPackage($pack->name, $pack->repo->archive_url);
                                        }
                                    }
                                   
                                } else {
                                    line('obm http '.$code[1].' '.trim($pack->repo->archive_url).' - url could not be resolved. Header: '.getHeader($code[1]));
                                }
                            }
                        }
                }
             
            }
        }
    } catch (Exception $e){
        error($e->getMessage());
        die;
    }
}

//------------------ Obm functions ---------------------

function getHttpPackage($pack_name, $pack_archive_url){
    
    
    line('obm http GET '.$pack_name.' curl exec to ..'.$pack_archive_url.' ...');
}
function error($error){
    echo "\33[0;33m".$error."\033[0m\n";
}
function line($line){
    $words = explode(" ", $line);
    $text = '';
    $text.= cli($words[0]).cli($words[1]).cli($words[2]);
    unset($words[0]);
    unset($words[1]);
    unset($words[2]);
    foreach($words as $word){
        $text.= cli($word, 'cyan');
    }
    echo $text."\n";
}
function cli($key, $color = ''){
    $start = "\033[0m";
    $end   = "\033[0m";
    if($color != ''){
        switch ($color) {
            case 'white':
                $color_str = '';
                break;
            case 'cyan':
                $color_str = "\33[0;36m";
                break;
            case 'brown':
                $color_str = "\33[0;33m";
                break;
        }
        return $start.$color_str.$key.' '.$end;
    }
    switch ($key) {
        case "obm":
            $start.= "\33[0;36m";
            break;
        case "http":
            $start.= "\33[0;32m";
            break;
        case "200":
            $start.= "\33[0;32m";
            break;
        case "WARN":
            $start.= "\33[0;31m";
            break;
        default:
            $start.= "\33[0;35m";
            break;
    }    
    return $start.$key.' '.$end;
}
function getOsName() { 
    $userOS = php_uname('v');
    $os_platform    =   "Unknown OS Platform";
    $os_array       =   array(
                            '/windows nt 6.2/i'     =>  'Windows',
                            '/windows nt 6.1/i'     =>  'Windows',
                            '/windows nt 6.0/i'     =>  'Windows',
                            '/windows nt 5.2/i'     =>  'Windows',
                            '/windows nt 5.1/i'     =>  'Windows',
                            '/windows xp/i'         =>  'Windows',
                            '/windows nt 5.0/i'     =>  'Windows',
                            '/windows me/i'         =>  'Windows',
                            '/win98/i'              =>  'Windows',
                            '/win95/i'              =>  'Windows',
                            '/win16/i'              =>  'Windows',
                            '/macintosh|mac os x/i' =>  'Mac',
                            '/mac_powerpc/i'        =>  'Mac',
                            '/linux/i'              =>  'Linux',
                            '/ubuntu/i'             =>  'Ubuntu',
                            '/centos/i'             =>  'Centos',
                            '/freebsd/i'            =>  'FreeBSD',
                            '/debian/i'             =>  'Debian',
                            '/fedora/i'             =>  'Fedora',
                            '/redhat/i'             =>  'RedHat',
                            '/ipad/i'               =>  'iPad',
                        );
    foreach ($os_array as $regex => $value) { 
        if (preg_match($regex, $userOS)) {
            $os_platform    =   $value;
        }
    }   
    return $os_platform;
}
function getHeader($code){
    $headers = array(
                    200    => 'OK',
                    201    => 'Created',
                    202    => 'Accepted',
                    203    => 'Non-Authoritative Information',
                    204    => 'No Content',
                    205    => 'Reset Content',
                    206    => 'Partial Content',

                    300    => 'Multiple Choices',
                    301    => 'Moved Permanently',
                    302    => 'Found',
                    304    => 'Not Modified',
                    305    => 'Use Proxy',
                    307    => 'Temporary Redirect',

                    400    => 'Bad Request',
                    401    => 'Unauthorized',
                    403    => 'Forbidden',
                    404    => 'Not Found',
                    405    => 'Method Not Allowed',
                    406    => 'Not Acceptable',
                    407    => 'Proxy Authentication Required',
                    408    => 'Request Timeout',
                    409    => 'Conflict',
                    410    => 'Gone',
                    411    => 'Length Required',
                    412    => 'Precondition Failed',
                    413    => 'Request Entity Too Large',
                    414    => 'Request-URI Too Long',
                    415    => 'Unsupported Media Type',
                    416    => 'Requested Range Not Satisfiable',
                    417    => 'Expectation Failed',

                    500    => 'Internal Server Error',
                    501    => 'Not Implemented',
                    502    => 'Bad Gateway',
                    503    => 'Service Unavailable',
                    504    => 'Gateway Timeout',
                    505    => 'HTTP Version Not Supported'
                );
    if(isset($headers[$code])){
        return $headers[$code];
    }
}

/**
 * @author Obullo Team @2013
 */