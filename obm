<?php
/**
|--------------------------------------------------------------------------
| OBM ( Obullo Package & Version Update Manager )
|--------------------------------------------------------------------------
| Package Manager Functions
|
| Update / Install Functions
| - Install the Obm                 :  cd /var/www/ && wget http://obullo.com/obm
| - Create a new project            : "php obm install $projectname" it will download the latest Obullo version from github to your project folder.
| - Update existing project         : "php obm update"  it will update the latest obullo modules using "package.json" file. 
| 
| Helpful functions
| - Create virtual host for apache  : "php obm addsite $projectname" ( Support for ubuntu at this time )
| - Delete virtual host for apache  : "php obm delsite $projectname" ( Support for ubuntu at this time ) 
|
*/ 

/**
| Obm is an update manager and designed for Obullo.
| 
| Command line examples: 
| 
| $ cd /var/www/
| $ wget http://obullo.com/obm
| 
| CREATE NEW PROJECT
| $ php obm install $yourprojectname
| 
| UPDATE EXISTING PROJECT
| $ php obm update
|
*/
$_SERVER['HTTP_USER_AGENT']     = 'OBM ( Obullo Package Manager ) / OS : '.php_uname();
$_SERVER['HTTP_ACCEPT_CHARSET'] = 'utf-8';

ini_set('zend.ze1_compatibility_mode', 0);
ini_set('memory_limit', '100000M');
set_time_limit(0);

if(getOSname() == 'Windows'){
    echo "\33[0;31mObullo is African origin and he loves to dance.\033[0m\n";
    die;
}
$OBM_VERSION = '0.1';
if(isset($_SERVER['argv'][0])){
    array_shift($_SERVER['argv']);
    if(ini_get('allow_url_fopen') !== "1"){
        exit("\33[0;31mYou need to set allow_url_fopen to \"On\" in your php.ini file.\033[0m\n");
    }
    if(isset($_SERVER['argv'][1]) AND strtolower($_SERVER['argv'][1]) == 'install'){
        
    }
    elseif(isset($_SERVER['argv'][1]) AND strtolower($_SERVER['argv'][1]) == 'update'){
        // parse package json and send files to OBM SERVER
        
    }
    $server_url   = 'http://obullo-2.0/obm_server.php';
    if(file_exists('package.json')){
        $package_json = file_get_contents('package.json');
        $_SERVER['argv']['_json'] = $package_json; // " { *40-23* : ";
    }
    $_SERVER['argv']['_version'] = $OBM_VERSION;
    // use key 'http' even if you send the request to https://...
    $options = array(
        'http' => array(
            'header'  => "Content-type: application/x-www-form-urlencoded\r\n",
            'method'  => 'POST',
            'content' => http_build_query($_SERVER['argv']),
        ),
    );
    $context  = stream_context_create($options);
    $json_res = file_get_contents($server_url, false, $context);
    //print_r(json_decode($json_res, true));
    $response = json_decode($json_res, true);
    
    if(isset($response['version_update'])){ // If need to OBM version update. Run the update.sh.
        echo "\33[0;36mNew OBM version available !\n";
        echo "upgrading to version ".$response['version_update']." ..\n";
        sleep(1);
        echo "please wait ..\n";
        sleep(1);
        echo "..\n";
        sleep(1);
        echo "...\n";

        $wget_sh = "
        sudo wget https://raw.github.com/obullo/obm/master/obm;
        echo \"\033[0m\";
        exit; > /dev/null &";
        shell_exec($wget_sh);
        
        echo "\033[0m";
        exit; //terminate the current script.
    }
    
    if(isset($response['errors'])){
        foreach($response['errors'] as $error){
            error($error);
        }
        die;
    }
    
    // print_r($response);
    // PARSE JSON DATA
    if(count($response) > 0){
        // give chmod 777 permission to installed folder
        // cd ..
        // chmod -R 777 modulename

    } else {
        error("Connection error, please try again.");
        die;
    }
    
    try {
        print_r($response);
        foreach($response as $key => $package){
            echo $key;
            var_dump(json_decode(trim($response[$key])));
        }
    } catch (Exception $e){
        echo $e->getMessage();
        die;
    }
}

//------------------ Obm functions ---------------------

function error($error){
    echo "\33[0;31m".$error."\033[0m\n";
}
function getOSname() { 
    $userOS = php_uname('v');
    $os_platform    =   "Unknown OS Platform";
    $os_array       =   array(
                            '/windows nt 6.2/i'     =>  'Windows',
                            '/windows nt 6.1/i'     =>  'Windows',
                            '/windows nt 6.0/i'     =>  'Windows',
                            '/windows nt 5.2/i'     =>  'Windows',
                            '/windows nt 5.1/i'     =>  'Windows',
                            '/windows xp/i'         =>  'Windows',
                            '/windows nt 5.0/i'     =>  'Windows',
                            '/windows me/i'         =>  'Windows',
                            '/win98/i'              =>  'Windows',
                            '/win95/i'              =>  'Windows',
                            '/win16/i'              =>  'Windows',
                            '/macintosh|mac os x/i' =>  'Mac',
                            '/mac_powerpc/i'        =>  'Mac',
                            '/linux/i'              =>  'Linux',
                            '/ubuntu/i'             =>  'Ubuntu',
                            '/centos/i'             =>  'Centos',
                            '/freebsd/i'            =>  'FreeBSD',
                            '/debian/i'             =>  'Debian',
                            '/fedora/i'             =>  'Fedora',
                            '/redhat/i'             =>  'RedHat',
                            '/ipad/i'               =>  'iPad',
                        );
    foreach ($os_array as $regex => $value) { 
        if (preg_match($regex, $userOS)) {
            $os_platform    =   $value;
        }
    }   
    return $os_platform;
}