<?php
/**
|--------------------------------------------------------------------------
| OBM ( Obullo Package & Version Update Manager )
|--------------------------------------------------------------------------
| Package Manager Functions
|
| Update / Install Functions
| - Install the Obm                 :  cd /var/www/ && wget http://obullo.com/obm
| - Create a new project            : "php obm install $projectname" it will download the latest Obullo version from github to your project folder.
| - Update existing project         : "php obm update"  it will update the latest obullo modules using "package.json" file. 
| 
| Helpful functions
| - Create virtual host for apache  : "php obm addsite $projectname" ( Support for ubuntu at this time )
| - Delete virtual host for apache  : "php obm delsite $projectname" ( Support for ubuntu at this time ) 
|
*/ 

/**
| Obm is an update manager and designed for Obullo.
| 
| Command line examples: 
| 
| $ cd /var/www/
| $ wget http://obullo.com/obm
| 
| CREATE NEW PROJECT
| $ php obm install $yourprojectname
| 
| UPDATE EXISTING PROJECT
| $ php obm update
|
*/
$OBM_VERSION = '0.0';
if($_SERVER['argv'][0]){
    array_shift($_SERVER['argv']);
    if(ini_get('allow_url_fopen') !== "1"){
        exit("\33[0;31mYou need to set allow_url_fopen to \"On\" in your php.ini file.\033[0m\n");
    }
    if(strtolower($_SERVER['argv'][0]) == 'install'){
        
    }
    elseif(strtolower($_SERVER['argv'][0]) == 'update'){
        // parse package json and send files to OBM SERVER
        
    }
    $server_url   = 'http://obullo-2.0/obm_server.php';
    if(file_exists('package.json')){
        $package_json = file_get_contents('package.json');
        $_SERVER['argv']['_json'] = $package_json; // " { *40-23* : ";
    }
    $_SERVER['argv']['_version'] = $OBM_VERSION;
    // use key 'http' even if you send the request to https://...
    $options = array(
        'http' => array(
            'header'  => "Content-type: application/x-www-form-urlencoded\r\n",
            'method'  => 'POST',
            'content' => http_build_query($_SERVER['argv']),
        ),
    );
    $context  = stream_context_create($options);
    $json_res = file_get_contents($server_url, false, $context);
    // print_r(json_decode($json_res, true));
    $response = json_decode($json_res, true);
    
    if(isset($response['version_update'])){ // If need to OBM version update. Run the update.sh.
        echo "\33[0;36mNew OBM version available !\n";
        echo "upgrading to version ".$response['version_update']." ..\n";
        sleep(1);
        echo "please wait ..\n";
        sleep(1);
        echo "..\n";
        sleep(1);
        echo "...\n";

        $wget_sh = "
        wget https://raw.github.com/obullo/obm/master/obm;
        echo \"\033[0m\";
        exit; > /dev/null &";
        
        shell_exec($wget_sh);
        
        echo "\033[0m";
        exit; //terminate the current script.
    }
    
    if(isset($response['errors'])){
        foreach($response['errors'] as $error){
            echo $error."\n";
        }
        die;
    }
    
    print_r($response);
    
    
    // print_r($xml);
    
    /*
    if(file_exists($obm_packages.'/'.$package.'.zip'))
    {
    }

    $shell = "cd /obullo_srv_cache";
    $shell.= "wget -0 $package.zip 'https://github.com/obullo/task/archive/master.zip'";
     */
}


$user_agent     =   $_SERVER['HTTP_USER_AGENT'];
function getOS() { 
    global $user_agent;
    $os_platform    =   "Unknown OS Platform";
    $os_array       =   array(
                            '/windows nt 6.2/i'     =>  'Windows 8',
                            '/windows nt 6.1/i'     =>  'Windows 7',
                            '/windows nt 6.0/i'     =>  'Windows Vista',
                            '/windows nt 5.2/i'     =>  'Windows Server 2003/XP x64',
                            '/windows nt 5.1/i'     =>  'Windows XP',
                            '/windows xp/i'         =>  'Windows XP',
                            '/windows nt 5.0/i'     =>  'Windows 2000',
                            '/windows me/i'         =>  'Windows ME',
                            '/win98/i'              =>  'Windows 98',
                            '/win95/i'              =>  'Windows 95',
                            '/win16/i'              =>  'Windows 3.11',
                            '/macintosh|mac os x/i' =>  'Mac OS X',
                            '/mac_powerpc/i'        =>  'Mac OS 9',
                            '/linux/i'              =>  'Linux',
                            '/ubuntu/i'             =>  'Ubuntu',
                            '/iphone/i'             =>  'iPhone',
                            '/ipod/i'               =>  'iPod',
                            '/ipad/i'               =>  'iPad',
                            '/android/i'            =>  'Android',
                            '/blackberry/i'         =>  'BlackBerry',
                            '/webos/i'              =>  'Mobile'
                        );
    foreach ($os_array as $regex => $value) { 
        if (preg_match($regex, $user_agent)) {
            $os_platform    =   $value;
        }
    }   
    return $os_platform;
}

echo getOS();