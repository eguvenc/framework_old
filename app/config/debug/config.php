<?php

/*
|--------------------------------------------------------------------------
| Framework Configuration
|--------------------------------------------------------------------------
|
| Configure Base Options
|
*/
$config = array(
	
	'base_url' => '/',  // Base Url "/" URL to your framework root, generally a '/' trailing slash.	
	'uri_protocol' => 'AUTO', // 'AUTO' Default - auto detects the protocol, other options: REQUEST_URI, QUERY_STRING, PATH_INFO.
							  // If your links do not seem to work, try one of the other options: ( REQUEST_URI, QUERY_STRING, PATH_INFO )
							  // You can use parameters like http://example.com/login?param=1&param2=yes
							  // 
	'error_reporting' => 1,  	// 'E_ALL ^ E_NOTICE'; // 'E_ALL ^ (E_NOTICE | E_WARNING | E_EXCEPTION | E_DATABASE)';
	'debug_backtrace' => array('enabled' => 'E_ALL', 'padding' => 3), // Enabling advanced debug mode will help you to easy development.

	// Models & Schemas
	'model_auto_sync' => true, // Auto sync should be enabled in development mode.
							   // Sync tool automatically updates your schema and database tables.
							   // In LIVE mode you need set to "false" because of the performance.

	 // Logs
	'log_threshold' => 0,    // 0 = Disables logging, 1 = Errors (PHP errors), 2 = Debug 3 = Info 4 = Benchmark 5 = All Messages
	'log_queries'=> true,    // If true ALL SQL Queries gets logged.
	'log_benchmark' => true, // If true ALL framework benchmarks gets logged.
	'log_date_format' => 'Y-m-d H:i:s', // Date format for log date() function.

			 				 // * For a live site you'll usually only enable "Errors (1)" to be logged otherwise your log files will fill up very fast.

	'time_reference' => 'local', // This pref tells the system whether to use your server's local time as the master "now" reference, or convert it to GMT.
	'index_page' => 'index.php', // Typically this will be your index.php file, If mod_rewrite enabled remove the page set this variable so that it is blank.
	'url_suffix' => '', // Allows you to add a suffix to all URLs generated by Framework.

	// Determines allowed uri extensions, you can use like : http://example.com/welcome/example.json
	// $this->uri->extension() method grab the extension.
	'uri_extensions' => array('php','html','json','xml','rss','ajax'),

	// Default Language 
	'lingo' => 'english', 		// This determines which set of language files should be used.
						 		// Make sure there is an available translation if you intend to use something other than english.
	// Default Character Set
	'charset' => 'UTF-8',  // This determines which character set is used by default in various methods that require a character set to be provided.

	// Hooks
	'enable_hooks' => false, // If you would like to use the 'hooks' feature you must enable it by etting this variable to "true".

	// Allowed URL Characters
	'permitted_uri_chars'  => 'a-z 0-9~%.:_-', // This lets you specify with a regular expression which characters are permitted within your URLs.
											   // As a security measure you are STRONGLY encouraged to restrict URLs to as few characters as possible.
											   // Leave blank to allow all characters -- but only if you are insane.
	// Enable Query Strings
	'enable_query_strings' => false, 	// By default Framework uses search-engine friendly segment based URLs: example.com/who/what/where/
	'directory_trigger' => 'd',			// You can optionally enable standard query string based URLs: example.com?who=me&what=something&where=here
	'controller_trigger' => 'c',        // The other items let you set the query string "words" that will invoke your controllers and its functions:
	'function_trigger' => 'm',			// example.com/index.php?d=directory&c=controller&m=function
	
	// Please note that some of the helpers won't work as expected when
	// this feature is enabled, since Framework is designed primarily to
	// use segment based URLs.

	'encryption_key' => 'write-your-secret-key', // If you use the Encryption class you MUST set an encryption key.

	// Cookies
	'cookie_prefix' => '',  // Set a prefix if you need to avoid collisions
	'cookie_domain' => '',  // Set to .your-domain.com for site-wide cookies
	'cookie_path' => '/',	// Typically will be a forward slash
	'cookie_time' => (7 * 24 * 60 * 60) + time(), // Cookie expire time.
	'cookie_secure'	=> false,	// Cookies will only be set if a secure HTTPS connection exists.

	// VERY IMPORTANT: For all cookie_time expirations, time() function must 
    // be at the end. Otherwise session cookie functions does not work correctly.

    'global_xss_filtering' => false, // Whether the XSS filter is always active when GET, POST or COOKIE data is encountered
    
	// Cross Site Request Forgery
    'csrf_protection' => false, 	// Enables a CSRF cookie token to be set. When set to true, token will be
    'csrf_token_name' => 'csrf_token_name',   // checked on a submitted form. If you are accepting user data, it is strongly
	'csrf_cookie_name' => 'csrf_cookie_name', // recommended CSRF protection be enabled.
	'csrf_expire' => 7200,		// The number in seconds the token should expire.
	
	 // Reverse Proxy IPs
	'proxy_ips' => '',

	// If your server is behind a reverse proxy, you must whitelist the proxy IP
	// addresses from which the Framework should trust the HTTP_X_FORWARDED_FOR
	// header in order to properly identify the visitor's IP address.
	// Comma-delimited, e.g. '10.0.1.200,10.0.1.201'
	
	// Output Compression
	'compress_output' => false

	// Enables Gzip output compression for faster page loads.  When enabled,
	// the output class will test whether your server supports Gzip.
	// Even if it does, however, not all browsers support compression
	// so enable only if you are reasonably sure your visitors can handle it.
);

/* End of file config.php */
/* Location: .app/config/debug/config.php */